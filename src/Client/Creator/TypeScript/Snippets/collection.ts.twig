{% for repository in repositories %}import {{ repository }}Repository from './Entities/{{ repository }}Repository'
{% endfor %}
import Connection from "../Connection/Connection";

/**
 * This class was created by the LeanApiBundle.
 *
 * All changes made in this file will be overwritten by the next create run.
 *
 * @created {{ "now" | date ('Y-m-d') | raw }}
 */
class RepositoryCollection {

  private readonly repositories: any
  private masterConnection: any
  private clusterConnection: any

  constructor() {

    this.masterConnection = false
    this.clusterConnection = false

    this.repositories = {}
    {% for repository in repositories %}this.repositories[ '{{ repository | lower }}' ] = new {{ repository }}Repository()
    {% endfor %}

  }

  setClusterConnection(connection: Connection) {
    this.clusterConnection = connection
  }

  setMasterConnection(connection: Connection) {
    this.masterConnection = connection
  }

  getRepository(entityType: string) {
    const repositoryName = entityType.toLowerCase()
    if (repositoryName in this.repositories) {
      const repo = this.repositories[repositoryName]
      if (repo.getConnectionType() === 'ClusterConnection') {
        repo.setConnection(this.clusterConnection)
      } else {
        repo.setConnection(this.masterConnection)
      }
      return this.repositories[repositoryName]
    } else {
      throw new Error('No repository with name ' + repositoryName + ' found. Registered repositories are: ' + JSON.stringify(Object.keys(this.repositories)))
    }
  }

{% for repository in repositories %}
  get{{ repository }}Repository(): {{ repository }}Repository {
      return this.getRepository("{{ repository }}")
  }

{% endfor %}
}

export default RepositoryCollection
